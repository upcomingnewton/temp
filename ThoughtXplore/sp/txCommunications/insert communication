CREATE OR REPLACE FUNCTION CommunicationInsert(Author INTEGER,Commtype_id INTEGER, TemplateID INTEGER, 
Subject text,ParameterDict TEXT,
TimeStamp_ TEXT,Message TEXT, ToGroupID TEXT, ip TEXT, 
OUT result_index INTEGER,
OUT result_sci INTEGER ) RETURNS RECORD AS $$

DECLARE 
    temp INTEGER;
    in_userid INTEGER;
    varrec RECORD;
    varrec1 RECORD;
    email TEXT;
	by_user TEXT;
	in_comm_id INTEGER;
BEGIN 
temp:=0;

/*  1. check if requesting user has right to insert this comm at this state  */

SELECT "UserEmail" into by_user FROM "txUser_user" WHERE id=Author;

SELECT * INTO varrec FROM CheckUserForPermission(Author,'txCommunications','communications','txCommunication_comm_CREATE');
IF varrec.status <> 500 THEN
	result_sci := -500;
	result_index := varrec.status;
     --   ROLLBACK;
	RETURN;
END IF;
/*  2. INSERT DATA INTO Communication Type table */

	INSERT INTO "txCommunications_communications"("Commtype_id_id", "FromUserID_id","TemplateID_id","Subject", "ParameterDict", "DateTimeSent", "Message","SCI_id") values (Commtype_id,Author,TemplateID,Subject,ParameterDict, TimeStamp_,Message, varrec.varsci);
GET DIAGNOSTICS temp := ROW_COUNT;
--RAISE NOTICE 'INSERT USER, ROW COUNT IS %',temp;
IF temp <> 1 THEN 
	result_sci := -500;
	result_index := -501;
      --  ROLLBACK;
        RETURN;
END IF;
SELECT "UserEmail" into email from "txUser_user" WHERE "id"=Author;
SELECT id INTO in_userid FROM "txUser_user" WHERE "UserEmail"=by_user;
	--COMMIT;

--RAISE NOTICE 'INSERT EMAIL TYPE, id IS %',in_userid;

/*  3. INSERT DATA in txCommunications_communication_groups   */
SELECT "id" into in_comm_id from "txCommunications_communications" WHERE "FromUserID_id"=Author AND "DateTimeSent"= TimeStamp_;
INSERT INTO "txCommunications_communication_groups"("Commtype_id_id", "comm_id_id", "Groups") Values (Commtype_id, in_comm_id, ToGroupID);

/* 4. MAKE A LOG ENTRY */
INSERT INTO "txCommunications_communicationlogs"("LogsUser_id","LogsPCI_id","LogsObject","LogsTimeStamp","LogsIP","LogsDescription","LogsPreviousState") 
						VALUES(varrec.userid,varrec.varpci,in_comm_id,now(),ip,'NULL','NULL');
GET DIAGNOSTICS temp := ROW_COUNT;
--RAISE NOTICE 'INSERT USER LOGS, ROW COUNT IS %',temp;
IF temp <> 1 THEN 
	result_sci := -502;
	result_index := -501;
      --  ROLLBACK;
        RETURN;
ELSE
	result_sci := varrec.varsci;
	result_index := 500;
	--COMMIT;
END IF;
RETURN;
END;
$$ LANGUAGE plpgsql;
